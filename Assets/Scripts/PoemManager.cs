using System.Collections.Generic;
using UnityEngine;
using TMPro;
using System;

public class PoemManager : MonoBehaviour
{
    private readonly string[] splitter = { " ", "\n", "," };

    [SerializeField] private string[] wordsToFind;   // Words to find generated by Gemini API
    [SerializeField] private int curWordId;
    [SerializeField] private ARWord arWordPrefab;
    [SerializeField] private Camera arCam;
    [SerializeField] private TMP_FontAsset semiBoldFont;

    [SerializeField] private Color defaultWord;
    [SerializeField] private Color currentWord;
    [SerializeField] private Color doneWord;
    [SerializeField] private Color missedWordColor;

    public string aiPoem;
    public List<string> missedWords = new();
    public List<ARWord> arwords = new();

    public static PoemManager Instance;

    public int timeRemaining = 60; // Change this value for different durations
    private float timer;
    private bool isStartGame, isGameOver = false;
    private int doneCount;
    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
        }
        else
        {
            // Set the instance to this object if it doesn't exist yet
            Instance = this;
        }
    }

    void Start()
    {
        timer = timeRemaining;
        //UIManager.Instance.UpdateUIPoem(aiPoem);
        GeminiAPIManager.Instance.OnWordsGenerated += OnWordsGenerated;
        GeminiAPIManager.Instance.OnPoemGenerated += GeneratePoem;
    }
    private void OnDestroy()
    {
        GeminiAPIManager.Instance.OnWordsGenerated -= OnWordsGenerated;
        GeminiAPIManager.Instance.OnPoemGenerated -= GeneratePoem;
    }
    private void Update()
    {
        if (isStartGame && !isGameOver)
        {
            if (timer > 0)
            {
                timer -= Time.deltaTime;
                UIManager.Instance.UpdateTime((int)timer);
            }
            else
            {
                //Debug.LogError("Game Complete");
                isGameOver = true;
                for (int i = doneCount; i < wordsToFind.Length; i++)
                {
                    missedWords.Add(wordsToFind[i]);
                }
                if (doneCount >= (wordsToFind.Length - 2))
                {
                    UpdateGameStat(true);
                }
                else
                {
                    UpdateGameStat(false);
                }
                // Timer has run out
                // You can add any actions you want to perform here
            }
        }
    }
    private void OnWordsGenerated(string wordResult)
    {
        wordsToFind = wordResult.Split(splitter, StringSplitOptions.RemoveEmptyEntries);
        HighlightWords();
        UIManager.Instance.UpdateUIPoem(aiPoem);
    }

    private void GeneratePoem(string poem)
    {
        aiPoem = poem;
        UIManager.Instance.UpdateUIPoem(aiPoem);
    }
    private void ClearARWords()
    {
        //Debug.Log("Clear");
        foreach (var obj in arwords)
        {
            if (obj != null)
            {
                Destroy(obj.gameObject);
            }
        }
        missedWords.Clear();
        arwords.Clear();
    }

    private void HighlightWords()
    {
        for (int i = 0; i < wordsToFind.Length; i++)
        {
            string arWord = wordsToFind[i];
            var obj = Instantiate(arWordPrefab);
            obj.name = arWord;
            obj.InitARWord(i, arWord, arCam, CollectCurWord);
            arwords.Add(obj);
            // Check if the text contains the target word
            int index = aiPoem.ToLower().IndexOf(arWord.ToLower());
            if (index != -1)
            {
                // If the word is found, change its color
                aiPoem = UpdateWord(aiPoem, arWord, defaultWord, semiBoldFont.name);
            }
        }
    }
    private void CollectCurWord(int index)
    {
        Destroy(arwords[curWordId].gameObject);
        if (index != curWordId)
        {
            //Debug.LogError("Not current word");
            missedWords.Add(wordsToFind[curWordId]);
            aiPoem = UpdateWord(aiPoem, wordsToFind[curWordId], missedWordColor, semiBoldFont.name);
            if (missedWords.Count >= 3)
            {
                isGameOver = true;
                UpdateGameStat(false);
            }
        }
        else
        {
            //Word collect efffect
            doneCount++;
            aiPoem = UpdateWord(aiPoem, wordsToFind[curWordId], doneWord, semiBoldFont.name);
        }
        //arwords.RemoveAt(curWordId);
        CollectCurWord();
    }
    // Click on each words to collect
    private void CollectCurWord()
    {
        if (curWordId < wordsToFind.Length - 1)
        {
            curWordId++;
            //curWordToCollect = wordsToFind[curWordId];
            aiPoem = UpdateWord(aiPoem, wordsToFind[curWordId], currentWord, semiBoldFont.name);
            UIManager.Instance.UpdateARPoem(aiPoem);
        }
        else
        {
            //Debug.Log("All Words Collected!");
            UpdateGameStat(true);
        }
    }
    private void UpdateGameStat(bool param)
    {
        foreach (var word in wordsToFind)
        {
            aiPoem = UpdateWord(aiPoem, word, defaultWord, semiBoldFont.name);
        }
        foreach (var word in missedWords)
        {
            aiPoem = UpdateWord(aiPoem, word, missedWordColor, semiBoldFont.name);
        }
        string status;
        if (param)
        {
            status = $"You’ve completed the poem!\nTime: {timeRemaining - (int)timer} seconds\nMissed words: {missedWords.Count}";
        }
        else
        {
            status = $"You’ve not completed the poem!\nTime: {timeRemaining - (int)timer} seconds\nMissed words: {missedWords.Count}";
        }
        UIManager.Instance.OnWinLose(param);
        UIManager.Instance.UpdateWinLosePoem(aiPoem, status);
        OnStopGame();
    }
    private static string UpdateWord(string originalText, string wordToColor, Color color, string fontName)
    {
        // Find the index of the word in the text
        int index = originalText.ToLower().IndexOf(wordToColor.ToLower());
        if (index != -1)
        {
            // Create a rich text string to change the color of the word
            string updatedText = originalText.Insert(index, "<font=" + fontName + ">" + "<color=#" + ColorUtility.ToHtmlStringRGB(color) + ">");
            updatedText = updatedText.Insert(index + wordToColor.Length + 22 + fontName.Length, "</color></font>"); // Add 15 and 6 to account for the opening color and font tag 
            return updatedText;
        }
        else
        {
            return originalText;
        }
    }

    //Set up generated words in UI buttons
    public void StartGame()
    {
        ClearARWords();
        doneCount = 0;
        timer = timeRemaining;
        HighlightWords();
        aiPoem = UpdateWord(aiPoem, wordsToFind[curWordId], currentWord, semiBoldFont.name);
        UIManager.Instance.UpdateARPoem(aiPoem);
        isStartGame = true;
        arCam.gameObject.GetComponent<MobileCam>().enabled = true;
        arCam.gameObject.GetComponent<MobileCam>().CallCam();
        curWordId = 0;
    }

    public void OnStopGame()
    {
        isStartGame = false;
        ClearARWords();
        arCam.gameObject.GetComponent<MobileCam>().enabled = false;
    }
}
